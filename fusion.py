# -*- coding: utf-8 -*-
"""Fusion.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xrarenVVKFD7rhkZ4or2r9L-NLG0nslC
"""

# for saving best model
import os
os.environ["CUDA_VISIBLE_DEVICES"]="2"
from pandas import *
import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.layers import Dropout
from tensorflow.keras.callbacks import ModelCheckpoint
from pandas import read_csv
import numpy as np
from tensorflow.keras import Model
from tensorflow.keras.layers import Layer
import tensorflow.keras.backend as K
from tensorflow.keras.layers import Input, Dense, SimpleRNN, Flatten, Activation, RepeatVector, Permute
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.metrics import mean_squared_error

import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow.keras.layers import AveragePooling2D

# Read the CSV file
data = pd.read_csv('embedding.csv')

# Extract the embeddings from the fourth and fifth columns
embeddings_4th = data.iloc[:, 3].apply(eval).tolist()
embeddings_5th = data.iloc[:, 4].apply(eval).tolist()

# Perform element-wise multiplication
result = np.multiply(embeddings_4th, embeddings_5th)

# Reshape the result to have the necessary dimensions
result_reshaped = np.reshape(result, (-1, 1, 667, 1))

# Convert the result to a TensorFlow tensor
result_tensor = tf.convert_to_tensor(result_reshaped, dtype=tf.float32)

# Apply average pooling
avg_pool_2d = AveragePooling2D(pool_size=(3, 3), strides=(1, 1), padding='same')
average_pooled_features = avg_pool_2d(result_tensor)

# Perform mathematical operations
sign_of_train_features = tf.math.sign(average_pooled_features)
abs_of_train_features = tf.math.abs(average_pooled_features)
sqrt_of_train_features = tf.math.sqrt(abs_of_train_features)
power_normalized_train_features = tf.math.multiply(sign_of_train_features, sqrt_of_train_features)

# L2 normalize the features
l2_normalized_features = tf.math.l2_normalize(power_normalized_train_features, axis=0)

# Convert the result back to a numpy array and then to a list
result_normalized = l2_normalized_features.numpy().tolist()

# Update the fourth column with the normalized embeddings
data.iloc[:, 3] = result_normalized

# Save the modified CSV file
data.to_csv('fused-embedding.csv', index=False)